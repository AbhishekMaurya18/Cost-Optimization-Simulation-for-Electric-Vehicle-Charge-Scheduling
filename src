#include<bits/stdc++.h>
using namespace std;

//global map for stations and vehicles use
map<int,vector<vector<double>>> smap,vmap;

// Distance types
using Kilometers = double;
using Milliseconds = uint64_t;
using KmPerHr = double;

// Graph types
using NodeID = uint16_t;
using Weight = Milliseconds;

// Constants from the spec
const double EARTH_RADIUS_KM = 6356.752;
const Kilometers MAX_CHARGE = 400;

const int MS_IN_SEC = 1000;
const int MS_IN_MINUTE = 60 * MS_IN_SEC;
const int MS_IN_HOUR = 60 * MS_IN_MINUTE;

inline double degree_to_radian(double angle) { return angle * (22/7) / 180.0; }

// Return the great-circle distance between two points in KM.
inline Kilometers haversine_dist(double lat1, double lng1, double lat2, double lng2) {
  double lat_rad1 = degree_to_radian(lat1);
  double lng_rad1 = degree_to_radian(lng1);
  double lat_rad2 = degree_to_radian(lat2);
  double lng_rad2 = degree_to_radian(lng2);

  double diff_lat = lat_rad2 - lat_rad1;
  double diff_lng = lng_rad2 - lng_rad1;

  double u = sin(diff_lat / 2.0);
  double v = sin(diff_lng / 2.0);

  double computation = asin(sqrt(u * u + cos(lat_rad1) * cos(lat_rad2) * v * v));

  return 2.0 * EARTH_RADIUS_KM * computation;
}

inline Milliseconds convert_km_to_ms_travel(Kilometers distance_km, double ROAD_SPEED_KM_HR) {
  return int(((distance_km / ROAD_SPEED_KM_HR) * MS_IN_HOUR) + 0.5);
}

inline double ms_to_hours(Milliseconds ms) { return double(ms) / double(MS_IN_HOUR); }


class Station
{
public:
    int id;    //Station id
    double lat;      //Latitude
    double lon;    //longitude
    double roc;        //Rate of per unit charge
    double coc;    //cost of per unit charge
    Station (int id, double lat, double lon, double roc, double coc ){
          this->id=id;
          this->lat=lat;
          this->lon=lon;
          this->roc=roc;
          this->coc=coc;
    }
};

// Data structure to store a graph edge
struct Edge {
    int src, dest;
};
 
// A class to represent a graph object
class Graph
{
public:
    // a vector of vectors to represent an adjacency list
    vector<vector<int>> adjList;
 
    // Graph Constructor
    Graph(vector<Edge> const &edges, int n)
    {
        // resize the vector to hold `n` elements of type `vector<int>`
        adjList.resize(n);
 
        // add edges to the undirected graph
        for (auto &edge: edges)
        {
            // insert at the end
            adjList[edge.src].push_back(edge.dest);
            adjList[edge.dest].push_back(edge.src);
        }
    }
};
 
// Function to print adjacency list representation of a graph
void printGraph(Graph const &graph, int n)
{
    for (int i = 0; i < n; i++)
    {
        // print the current vertex number
        cout << i << " ==> ";
 
        // print all neighboring vertices of a vertex `i`
        for (int v: graph.adjList[i]) {
            cout << v << " ";
        }
        cout << endl;
    }
}

//Reserve station for refueling
void reserve(){

    //explore the vehicle map
    for(auto &v : vmap){
        int vid=v.first;
        vector<vector<double>> reach=v.second;

        //A list to contain all possible station having minimum equal cost of per unit charge
        list<vector<double>> solver;
        solver.clear();

        for(int i=0;i<reach.size();i++){
            if(solver.empty()){
                solver.push_back(reach[i]);
            }
            else{
                if(!solver.empty() && int((solver.back()[1]-reach[i][1])*100)>=0){
                    while(!solver.empty() && int((solver.back()[1]-reach[i][1])*100)>0){
                        solver.pop_back();
                    }
                    solver.push_back(reach[i]);
                }
            }
        }

        //print the affordable station to go
        cout<<"\nVehicle "<<vid<<" can recharge its battery at Station :\n";
        int size=solver.size();
        for(int i=0;i<size;i++){
            vector<double> temp=solver.front();
            solver.pop_front();
            cout<<"\t\t"<<temp[0]<<" in "<<temp[2]<<" hours, where cost of per unit charge is "<<temp[1]<<"\n";
            solver.push_back(temp);
        }
    }
    cout<<"\n";

    return ;
}
 
int main()
{
    //extern vector<Station> network;
    vector<Edge> edges =
    {
        {1, 2}, {1, 3}, {1,4},{1,5},{2, 3}, {2, 6}, {2, 7},{3,8},{3,10},{4,8},{4,9},{5,10},{5,13},{6,18},{6,19},{7,17},
        {7,18},{8,20},{8,15},{9,13},{9,14},{10,11},{11,17},{12,16},{13,18},{13,15},{14,19},{15,17},{16,14},{17,6},{18,19},{19,20}
    };
 
    // total number of nodes in the graph (labelled from 0 to 20)
    int n = 21;
 
    // construct graph
    Graph graph(edges, n);
 
    // print adjacency list representation of a graph
    printGraph(graph, n);

    //station properties 
    vector<Station> network = {{{1, 40.710356, -73.819109, 131.0,8.5},
                                 {2, 40.544595, -74.334113, 159.0,8.6},
                                 {3, 39.858702, -73.277027, 133.0,8.5},
                                 {4, 39.592251, -93.27942, 143.0,9},
                                 {5, 34.667629, -79.002343, 105.0,9.3},
                                 {6, 35.108486, -96.612804, 175.0,9.2},
                                 {7, 39.662265, -75.692027, 120.0,8.3},
                                 {8, 43.623536, -72.3258949, 153.0,10},
                                 {9, 40.738399, -94.058998, 106.0,9.7},
                                 {10, 39.877342, -77.618699, 177.0,9.4},
                                 {11, 37.66976, -77.461414, 128.0,8.4},
                                 {12, 38.249149, -92.652524, 109.0,8.7},
                                 {13, 42.518715, -87.950428, 144.0,9.1},
                                 {14, 39.040814, -94.369265, 107.0,8.7},
                                 {15, 38.894227, -93.367407, 114.0,10.1},
                                 {16, 32.726686, -94.619093, 116.0,9.3},
                                 {17, 41.245823, -73.009059, 130.0,9},
                                 {18, 43.102424, -76.187446, 138.0,8.3},
                                 {19, 38.957778, -92.252761, 109.0,9.12},
                                 {20, 40.277134, -76.823255, 141.0,9.65}
                                }};

    int rc=8;   //number of requests
    //cin>>rc;

    vector<vector<double>> request(rc,vector<double>(5,0));    // request have {veh_id,lat,lon,avg_speed,max_cap,soc}

    request={{1,40,-74.6,60,220},
            {2,38.2,-91.8,72,181},
            {3,38.5,-93.6,65,174},
            {4,32.5,-93.3,67,162},
            {5,38.7,-91.9,50,87},
            {6,40.7,-73.9,60,95},
            {7,40,-74.5,70,110},
            {8,40,-92.7,47,200}};

    // cout<<"Enter Vehicle details:\n\tveh_id\t   lat\t   lon\t   avg_speed\t\tsoc\n";
    // for(int i=0;i<rc;i++){
    //     cout<<"veh_id: "<<i+1;
    //     request[i][0]=i+1;
    //     for(int j=1;j<6;j++){
    //         double x;
    //         cin>>x;
    //         request[i][j]=x;
    //     }
    // }

    for(int i=0;i<request.size();i++){
        int vid=request[i][0];
        double vlat=request[i][1],vlon=request[i][2],vavg_speed=request[i][3], vsoc=request[i][4];
        
        cout<<"\nVehicle "<<vid<<":\n";
        for(int j=0;j<20;j++){
            const Station &sid = network.at(j);
            Kilometers dist=haversine_dist(vlat,vlon,sid.lat,sid.lon);

            if(dist>vsoc){
                //cout<<dist<<" ";
                continue;
            }
            else{
                double time=dist/vavg_speed;

                //round of time to 2 decimal places
                time= (int(time*1000+.5)/1000.0);

                cout<<"is "<<time<<" hours away from Station "<<sid.id<<"\n";

                vmap[vid].push_back({double(sid.id), sid.coc,time});
                smap[sid.id].push_back({double(vid),time});
            }
        }
        cout<<"\n";

    }
    
    reserve();
    
    return 0;
}

